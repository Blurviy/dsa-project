// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

import ballerina/http;

# A RESTful API for managing Programme development and review workflow at Namibia University of Science and Technology.
public isolated client class Client {
    final http:Client clientEp;
    # Gets invoked to initialize the `connector`.
    #
    # + config - The configurations to be used when initializing the `connector` 
    # + serviceUrl - URL of the target service 
    # + return - An error if connector initialization failed 
    public isolated function init(ConnectionConfig config =  {}, string serviceUrl = "http://localhost:8080") returns error? {
        http:ClientConfiguration httpClientConfig = {httpVersion: config.httpVersion, timeout: config.timeout, forwarded: config.forwarded, poolConfig: config.poolConfig, compression: config.compression, circuitBreaker: config.circuitBreaker, retryConfig: config.retryConfig, validation: config.validation};
        do {
            if config.http1Settings is ClientHttp1Settings {
                ClientHttp1Settings settings = check config.http1Settings.ensureType(ClientHttp1Settings);
                httpClientConfig.http1Settings = {...settings};
            }
            if config.http2Settings is http:ClientHttp2Settings {
                httpClientConfig.http2Settings = check config.http2Settings.ensureType(http:ClientHttp2Settings);
            }
            if config.cache is http:CacheConfig {
                httpClientConfig.cache = check config.cache.ensureType(http:CacheConfig);
            }
            if config.responseLimits is http:ResponseLimitConfigs {
                httpClientConfig.responseLimits = check config.responseLimits.ensureType(http:ResponseLimitConfigs);
            }
            if config.secureSocket is http:ClientSecureSocket {
                httpClientConfig.secureSocket = check config.secureSocket.ensureType(http:ClientSecureSocket);
            }
            if config.proxy is http:ProxyConfig {
                httpClientConfig.proxy = check config.proxy.ensureType(http:ProxyConfig);
            }
        }
        http:Client httpEp = check new (serviceUrl, httpClientConfig);
        self.clientEp = httpEp;
        return;
    }
    # Retrieve all programmes
    #
    # + return - Successful operation 
    resource isolated function get programmes() returns Programme[]|error {
        string resourcePath = string `/programmes`;
        Programme[] response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Add a new programme
    #
    # + return - Programme created successfully 
    resource isolated function post programmes(Programme payload) returns http:Response|error {
        string resourcePath = string `/programmes`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        http:Response response = check self.clientEp->post(resourcePath, request);
        return response;
    }
    # Get a programme by programme code
    #
    # + programmeCode - The programme code
    # + return - Programme details retrieved 
    resource isolated function get programmes/[string programmeCode]() returns Programme|error {
        string resourcePath = string `/programmes/${getEncodedUri(programmeCode)}`;
        Programme response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Update a programme by programme code
    #
    # + programmeCode - The programme code
    # + return - Programme updated successfully 
    resource isolated function put programmes/[string programmeCode](Programme payload) returns http:Response|error {
        string resourcePath = string `/programmes/${getEncodedUri(programmeCode)}`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        http:Response response = check self.clientEp->put(resourcePath, request);
        return response;
    }
    # Delete a programme by programme code
    #
    # + programmeCode - The programme code
    # + return - Programme deleted successfully 
    resource isolated function delete programmes/[string programmeCode]() returns http:Response|error {
        string resourcePath = string `/programmes/${getEncodedUri(programmeCode)}`;
        http:Response response = check self.clientEp-> delete(resourcePath);
        return response;
    }
    # Retrieve programmes due for review
    #
    # + return - Successful operation 
    resource isolated function get programmes/due\-for\-review() returns Programme[]|error {
        string resourcePath = string `/programmes/due-for-review`;
        Programme[] response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Retrieve programmes by faculty
    #
    # + facultyName - The name of the faculty
    # + return - Successful operation 
    resource isolated function get programmes/by\-faculty/[string facultyName]() returns Programme[]|error {
        string resourcePath = string `/programmes/by-faculty/${getEncodedUri(facultyName)}`;
        Programme[] response = check self.clientEp->get(resourcePath);
        return response;
    }
}
